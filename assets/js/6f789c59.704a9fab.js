"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70968],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(n),m=i,u=h["".concat(s,".").concat(m)]||h[m]||d[m]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},88828:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),i=n(35742);function r(e){let{title:t}=e;return a.createElement(i.Z,null,a.createElement("title",null,t))}},97414:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905)),r=n(88828);const o={title:"OpenBB Charting",sidebar_position:1,description:"This page introduces the optional openbb-charting extension.",keywords:["explanation","OpenBB Platform","Python client","Fast API","getting started","extensions","charting","view","Plotly","toolkits","community","Plotly","OpenBBFigure","PyWry"]},l=void 0,s={unversionedId:"platform/extensions/charting/index",id:"platform/extensions/charting/index",title:"OpenBB Charting",description:"This page introduces the optional openbb-charting extension.",source:"@site/content/platform/extensions/charting/index.md",sourceDirName:"platform/extensions/charting",slug:"/platform/extensions/charting/",permalink:"/platform/extensions/charting/",draft:!1,editUrl:"https://github.com/OpenBB-finance/OpenBBTerminal/edit/main/website/content/platform/extensions/charting/index.md",tags:[],version:"current",lastUpdatedBy:"Henrique Joaquim",lastUpdatedAt:1713620851,formattedLastUpdatedAt:"Apr 20, 2024",sidebarPosition:1,frontMatter:{title:"OpenBB Charting",sidebar_position:1,description:"This page introduces the optional openbb-charting extension.",keywords:["explanation","OpenBB Platform","Python client","Fast API","getting started","extensions","charting","view","Plotly","toolkits","community","Plotly","OpenBBFigure","PyWry"]},sidebar:"tutorialSidebar",previous:{title:"Toolkits",permalink:"/platform/extensions/toolkit_extensions"},next:{title:"Examples",permalink:"/platform/extensions/charting/examples"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"How Does It Work?",id:"how-does-it-work",level:2},{value:"No Render",id:"no-render",level:3},{value:"What Endpoints Have Charts?",id:"what-endpoints-have-charts",level:2},{value:"Charting Functions",id:"charting-functions",level:3},{value:"Endpoints Without Charts",id:"endpoints-without-charts",level:2},{value:"Charts From Any Data",id:"charts-from-any-data",level:2},{value:"Tables",id:"tables",level:2}],h={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.Z,{title:"OpenBB Charting - Extensions | OpenBB Platform Docs",mdxType:"HeadTitle"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"openbb-charting")," extension provides elements for building and displaying interactive charts, tables, dashboards, and more, directly from the OpenBB Platform's Python Interface and FAST API."),(0,i.kt)("p",null,"It allows users to create a custom view, without any previous experience working with Plotly, from any response served by the OpenBB Platform."),(0,i.kt)("p",null,"The Python Interface includes a custom ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenBB-finance/pywry"},"PyWry")," backend for displaying any content, in a WebKit HTML window served over ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost"),". In an IDE setting, they will be rendered inline."),(0,i.kt)("p",null,"To install, follow the instructions ",(0,i.kt)("a",{parentName:"p",href:"installation"},"here"),". The sections below provide a general explanation of the extension."),(0,i.kt)("h2",{id:"how-does-it-work"},"How Does It Work?"),(0,i.kt)("p",null,"It works by extending the ",(0,i.kt)("inlineCode",{parentName:"p"},"OBBject")," class with a new attribute, ",(0,i.kt)("inlineCode",{parentName:"p"},"charting"),". When it is installed, every response from the OpenBB Platform will be equipped with these tools."),(0,i.kt)("p",null,"For functions that have pre-defined views, it serves as an intermediary between the user request and the response, activated when ",(0,i.kt)("inlineCode",{parentName:"p"},"chart=True"),". When a chart is created, it will populate the existing, ",(0,i.kt)("inlineCode",{parentName:"p"},"chart"),", attribute of the ",(0,i.kt)("inlineCode",{parentName:"p"},"OBBject"),". This is where it is served by the FAST API from the function request. In the Python Interface, charts can be generated post-request, regardless of ",(0,i.kt)("inlineCode",{parentName:"p"},"chart=True"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"chart")," attribute in the OBBject contains three items, responses from the API have two:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fig"),": The OpenBBFigure object - an extended Plotly GraphObjects class. Not included in the API response."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"content"),": The Plotly JSON representation of the chart - Returned to the API."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format"),": The format of the chart - 'plotly' is currently the only charting library.")),(0,i.kt)("p",null,"There is one OBBject class method, ",(0,i.kt)("inlineCode",{parentName:"p"},"show()"),", which will display the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"chart")," attribute, if populated."),(0,i.kt)("p",null,"The new ",(0,i.kt)("inlineCode",{parentName:"p"},"charting")," attribute that binds to the OBBject also has a ",(0,i.kt)("inlineCode",{parentName:"p"},"show()")," method.  This differs in that it overwrites the existing chart, effectively a 'reset' for the view."),(0,i.kt)("p",null,"The extension has a docstring, and it lists the class methods within ",(0,i.kt)("inlineCode",{parentName:"p"},"charting"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from openbb import obb\ndata = obb.equity.price.historical("AAPL")\ndata.charting?\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"Charting extension.\n\nMethods\n-------\nshow\n    Display chart and save it to the OBBject.\nto_chart\n    Redraw the chart and save it to the OBBject, with an optional entry point for Data.\nfunctions\n    Return a list of Platform commands with charting functions.\nget_params\n    Return the charting parameters for the function the OBBject was created from.\nindicators\n    Return the list of the available technical indicators to use with the `to_chart` method and OHLC+V data.\ntable\n    Display an interactive table.\ncreate_line_chart\n    Create a line chart from external data.\ncreate_bar_chart\n    Create a bar chart, on a single x-axis with one or more values for the y-axis, from external data.\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"When creating a chart directly from the OpenBB Platform endpoint, chart parameters must be passed as a nested dictionary under the name, ",(0,i.kt)("inlineCode",{parentName:"p"},"chart_params"),"."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'chart_params = dict(\n    title="AAPL 50/200 Day EMA",\n    indicators=dict(\n        ema=dict(length=[50,200]),\n    ),\n)\nparams = dict(\n    symbol="AAPL",\n    start_date="2022-01-01",\n    provider="yfinance",\n    chart=True,\n    chart_params=chart_params,\n)\ndata = obb.equity.price.historical(**params)\n')),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"chart_params")," are sent in the body of the request when using the API.")),(0,i.kt)("p",null,"Passing only ",(0,i.kt)("inlineCode",{parentName:"p"},"chart=True")," will return a default view which can be modified and drawn again post-request, via the ",(0,i.kt)("inlineCode",{parentName:"p"},"OBBject"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"OBBject\n\nid: 06614d74-7443-7201-8000-a65f358136a3\nresults: [{'date': datetime.date(2022, 1, 3), 'open': 177.8300018310547, 'high': 18...\nprovider: yfinance\nwarnings: None\nchart: {'content': {'data': [{'close': [182.00999450683594, 179.6999969482422, 174....\nextra: {'metadata': {'arguments': {'provider_choices': {'provider': 'yfinance'}, 's...\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"data.show()\n")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/b427d68b-777e-4230-852a-df749c5dbc46",alt:"candles with ema"})),(0,i.kt)("h3",{id:"no-render"},"No Render"),(0,i.kt)("p",null,"The charts can be created without opening the PyWry window, and this is the default behaviour when ",(0,i.kt)("inlineCode",{parentName:"p"},"chart=True"),".\nWith the ",(0,i.kt)("inlineCode",{parentName:"p"},"charting.show()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"charting.to_chart()")," methods, the default is ",(0,i.kt)("inlineCode",{parentName:"p"},"render=True"),".\nSetting as ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," will return the chart to itself, populating the ",(0,i.kt)("inlineCode",{parentName:"p"},"chart")," attribute of OBBject."),(0,i.kt)("h2",{id:"what-endpoints-have-charts"},"What Endpoints Have Charts?"),(0,i.kt)("p",null,"The OpenBB Platform router, open_api.json, function signatures, and documentation are all generated based on your specific configuration. When the ",(0,i.kt)("inlineCode",{parentName:"p"},"openbb-charting"),' extension is installed, any function found in the "',(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenBB-finance/OpenBBTerminal/blob/develop/openbb_platform/obbject_extensions/charting/openbb_charting/charting_router.py"},"charting_router"),'" adds ',(0,i.kt)("inlineCode",{parentName:"p"},"chart: bool = False")," to the command on build. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"obb.index.price.historical?")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"Signature:\nobb.index.price.historical(\n    symbol: Annotated[Union[str, List[str]], OpenBBCustomParameter(description='Symbol to get data for. Multiple comma separated items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.')],\n    ...\n    chart: typing.Annotated[bool, OpenBBCustomParameter(description='Whether to create a chart or not, by default False.')] = False,\n    **kwargs,\n) -> openbb_core.app.model.obbject.OBBject\n")),(0,i.kt)("h3",{id:"charting-functions"},"Charting Functions"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"charting")," attribute of every command output has methods for identifying the charting functions and parameters.\nWhile able to serve JSON-serializable charts, the ",(0,i.kt)("inlineCode",{parentName:"p"},"openbb-charting")," extension is best-suited for use with the Python Interface. Much of the functionality is realized post-request."),(0,i.kt)("p",null,"Examine the extension by returning any command at all."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from openbb import obb\n\ndata = obb.equity.price.historical("SPY,QQQ,XLK,BTC-USD", provider="yfinance")\n\ndata.charting.functions()\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"['crypto_price_historical',\n 'currency_price_historical',\n 'economy_fred_series',\n 'equity_price_historical',\n 'equity_price_performance',\n 'etf_historical',\n 'etf_holdings',\n 'etf_price_performance',\n 'index_price_historical',\n 'technical_adx',\n 'technical_aroon',\n 'technical_cones',\n 'technical_ema',\n 'technical_hma',\n 'technical_macd',\n 'technical_rsi',\n 'technical_sma',\n 'technical_wma',\n 'technical_zlma']\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The list above should, as shown here, should not be considered as the source of truth. It's just a sample.")),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"OBBject")," in question has a dedicated charting function associated with it, parameters are detailed by the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_params()")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"EquityPriceHistoricalChartQueryParams\n\n    Parameters\n    ----------\n\n    data : Union[Data, list[Data], NoneType]\n        Filtered versions of the data contained in the original `self.results`.\n        Columns should be the same as the original data.\n        Example use is to reduce the number of columns, or the length of data, to plot.\n\n    title : Union[str, NoneType]\n        Title of the chart.\n\n    target : Union[str, NoneType]\n        The specific column to target.\n        If supplied, this will override the candles and volume parameters.\n\n    multi_symbol : bool\n        Flag to indicate whether the data contains multiple symbols.\n        This is mostly handled automatically, but if the chart fails to generate try setting this to True.\n\n    same_axis : bool\n        If True, forces all data to be plotted on the same axis.\n\n    normalize : bool\n        If True, the data will be normalized and placed on the same axis.\n\n    returns : bool\n        If True, the cumulative returns for the length of the time series will be calculated and plotted.\n\n    candles : bool\n        If True, and OHLC exists, and there is only one symbol in the data, candles will be plotted.\n\n    heikin_ashi : bool\n        If True, and `candles=True`, Heikin Ashi candles will be plotted.\n\n    volume : bool\n        If True, and volume exists, and `candles=True`, volume will be plotted.\n\n    indicators : Union[ChartIndicators, dict[str, dict[str, Any]], NoneType]\n        Indicators to be plotted, formatted as a dictionary.\n        Data containing multiple symbols will ignore indicators.\n        Example:\n            indicators = dict(\n                sma=dict(length=[20,30,50]),\n                adx=dict(length=14),\n                rsi=dict(length=14),\n            )\n")),(0,i.kt)("p",null,"Not all commands will have the same ",(0,i.kt)("inlineCode",{parentName:"p"},"chart_params"),", and some less than others, but it is always possible to redraw the chart with a different combination post-request. Here's what the default chart is from the output of the command above."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"chart=True")," was not specified, it will need to be created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"data.charting.to_chart()\n")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/9231c455-ee1b-47a8-a627-b0034ea52ecd",alt:"obb.equity.price.historical()"})),(0,i.kt)("p",null,"The extension recognized that multiple symbols were within the object, and made a determination to display cumulative returns by default."),(0,i.kt)("p",null,"A candlestick chart will draw only when there is one symbol in the data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'obb.equity.price.historical(\n    symbol="XLK",\n    start_date="2024-01-01",\n    provider="yfinance",\n    chart=True,\n    chart_params=dict(title="XLK YTD", heikin_ashi=True)\n).show()\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/13af30b3-7298-402d-ac32-1f7700cd08fd",alt:"obb.equity.price.historical()"})),(0,i.kt)("h2",{id:"endpoints-without-charts"},"Endpoints Without Charts"),(0,i.kt)("p",null,"Most functions do not have dedicated charts. However, it's still possible to generate one automatically. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," above, we can try passing it through a quantitative analysis command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'data = obb.equity.price.historical(\n    symbol="XLK",\n    start_date="2023-01-01",\n    provider="yfinance",\n)\nqa = obb.quantitative.rolling.stdev(data.results, target="close")\n\nqa.charting.show(title="XLK Rolling 21 Day Standard Deviation")\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/f87a6648-7365-4529-a254-35897af448ca",alt:"auto chart"})),(0,i.kt)("h2",{id:"charts-from-any-data"},"Charts From Any Data"),(0,i.kt)("p",null,"There are methods for creating a generic chart from any external data.\nThey will bypass any data contained in the parent object, unless specifically fed into itself."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"charting.create_bar_chart()"),(0,i.kt)("li",{parentName:"ul"},"charting.create_line_chart()")),(0,i.kt)("p",null,"They can also be used as standalone components by initializing an empty instance of the OBBject class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from openbb import obb\nfrom openbb_core.app.model.obbject import OBBject\ncreate_bar_chart = OBBject(results=None).charting.create_bar_chart\n\ncreate_bar_chart?\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'Create a bar chart on a single x-axis with one or more values for the y-axis.\n\nParameters\n----------\ndata : Union[list, dict, pd.DataFrame, List[pd.DataFrame], pd.Series, List[pd.Series], np.ndarray, Data]\n    Data to plot.\nx : str\n    The x-axis column name.\ny : Union[str, List[str]]\n    The y-axis column name(s).\nbarmode : Literal["group", "stack", "relative", "overlay"], optional\n    The bar mode, by default "group".\nxtype : Literal["category", "multicategory", "date", "log", "linear"], optional\n    The x-axis type, by default "category".\ntitle : Optional[str], optional\n    The title of the chart, by default None.\nxtitle : Optional[str], optional\n    The x-axis title, by default None.\nytitle : Optional[str], optional\n    The y-axis title, by default None.\norientation : Literal["h", "v"], optional\n    The orientation of the chart, by default "v".\ncolors: Optional[List[str]], optional\n    Manually set the colors to cycle through for each column in \'y\', by default None.\nlayout_kwargs : Optional[Dict[str, Any]], optional\n    Additional keyword arguments to apply with figure.update_layout(), by default None.\n\nReturns\n-------\nOpenBBFigure\n    The OpenBBFigure object.\n')),(0,i.kt)("h2",{id:"tables"},"Tables"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"openbb-charting")," extension is equipped with interactive tables, utilizing the React framework. They are displayed by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'data = obb.equity.price.quote("AAPL,MSFT,GOOGL,META,TSLA,AMZN", provider="yfinance")\ndata.charting.table()\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/77f5f812-b933-4ced-929c-c1e39b2a3eed",alt:"Interactive Tables"})),(0,i.kt)("p",null,"External data can also be supplied, providing an opportunity to filter or apply Pandas operations before display."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'new_df = df.to_df().T\nnew_df.index.name="metric"\nnew_df.columns = new_df.loc["symbol"]\nnew_df.drop("symbol", inplace=True)\ndata.charting.table(data=new_df)\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/d02f8c34-e1d1-4001-a73e-d3b948a4c5c1",alt:"Tables From External Data"})),(0,i.kt)("admonition",{type:"important"},(0,i.kt)("p",{parentName:"admonition"},"This does not alter the contents of the original object, the displayed data is a copy.")))}m.isMDXComponent=!0}}]);