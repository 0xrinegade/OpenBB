"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[39253],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},88828:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(35742);function i(e){let{title:t}=e;return n.createElement(r.Z,null,n.createElement("title",null,t))}},54307:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=a(87462),r=(a(67294),a(3905)),i=a(88828);const l={title:"How To Add A Data Provider To An Existing Endpoint",sidebar_position:1,description:"This guide outlines the process for adding an endpoint to an existing data provider and router endpoint.",keywords:["OpenBB Platform","Open source","Python interface","REST API","contribution","contributing","documentation","code","provider","data","endpoint","existing","OpenBB extensions","OpenBB provider","standard model","provider model","how to"]},o=void 0,s={unversionedId:"platform/development/how-to/add_data_to_existing_endpoint",id:"platform/development/how-to/add_data_to_existing_endpoint",title:"How To Add A Data Provider To An Existing Endpoint",description:"This guide outlines the process for adding an endpoint to an existing data provider and router endpoint.",source:"@site/content/platform/development/how-to/add_data_to_existing_endpoint.md",sourceDirName:"platform/development/how-to",slug:"/platform/development/how-to/add_data_to_existing_endpoint",permalink:"/platform/development/how-to/add_data_to_existing_endpoint",draft:!1,editUrl:"https://github.com/OpenBB-finance/OpenBBTerminal/edit/main/website/content/platform/development/how-to/add_data_to_existing_endpoint.md",tags:[],version:"current",lastUpdatedBy:"montezdesousa",lastUpdatedAt:1713783034,formattedLastUpdatedAt:"Apr 22, 2024",sidebarPosition:1,frontMatter:{title:"How To Add A Data Provider To An Existing Endpoint",sidebar_position:1,description:"This guide outlines the process for adding an endpoint to an existing data provider and router endpoint.",keywords:["OpenBB Platform","Open source","Python interface","REST API","contribution","contributing","documentation","code","provider","data","endpoint","existing","OpenBB extensions","OpenBB provider","standard model","provider model","how to"]},sidebar:"tutorialSidebar",previous:{title:"How To Guides",permalink:"/platform/development/how-to/"},next:{title:"How To Add A New Data Endpoint With An Existing Provider",permalink:"/platform/development/how-to/add_endpoint_to_existing_provider"}},p={},d=[{value:"Identify What&#39;s Being Added",id:"identify-whats-being-added",level:2},{value:"Provider API Documentation",id:"provider-api-documentation",level:3},{value:"Base URL",id:"base-url",level:3},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Source Response",id:"source-response",level:3},{value:"OpenBB Endpoint",id:"openbb-endpoint",level:3},{value:"Standard Model",id:"standard-model",level:3},{value:"Standard QueryParams",id:"standard-queryparams",level:3},{value:"Standard Data",id:"standard-data",level:3},{value:"Build the Provider Model",id:"build-the-provider-model",level:2},{value:"Create a New File",id:"create-a-new-file",level:3},{value:"Import Statements",id:"import-statements",level:3},{value:"Define The QueryParams",id:"define-the-queryparams",level:3},{value:"Define The Data Model",id:"define-the-data-model",level:3},{value:"Build the Fetcher Class",id:"build-the-fetcher-class",level:3},{value:"Map To Router",id:"map-to-router",level:2},{value:"Rebuild Static Assets",id:"rebuild-static-assets",level:2},{value:"Add Tests",id:"add-tests",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Python Test",id:"python-test",level:4},{value:"API Test",id:"api-test",level:4},{value:"Submit A Pull Request",id:"submit-a-pull-request",level:2},{value:"Linters",id:"linters",level:3},{value:"Add Files To Commit",id:"add-files-to-commit",level:3},{value:"Install Pre-Commit Hooks",id:"install-pre-commit-hooks",level:3},{value:"Commit Changes",id:"commit-changes",level:3},{value:"Push Changes",id:"push-changes",level:3},{value:"Open a Pull Request",id:"open-a-pull-request",level:3},{value:"Enjoy",id:"enjoy",level:3}],m={toc:d},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{title:"How To Add A Data Provider To An Existing Endpoint - How-To - Development | OpenBB Platform Docs",mdxType:"HeadTitle"}),(0,r.kt)("p",null,"This page will walk through adding a data provider to an existing endpoint, using a standard model. At a high level, the process will look something like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Document the parameters and returned fields from the chosen data provider."),(0,r.kt)("li",{parentName:"ul"},"Find the existing standard model that is mapped to the router endpoint."),(0,r.kt)("li",{parentName:"ul"},"Identify any common parameters and fields to map."),(0,r.kt)("li",{parentName:"ul"},"Build the provider models and Fetcher class by inheriting from the standard models."),(0,r.kt)("li",{parentName:"ul"},"Map the new provider model to the router."),(0,r.kt)("li",{parentName:"ul"},"Rebuild the Python interface and static assets."),(0,r.kt)("li",{parentName:"ul"},"Add unit tests."),(0,r.kt)("li",{parentName:"ul"},"Add integration tests."),(0,r.kt)("li",{parentName:"ul"},"Submit a pull request.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Before getting started, get a few housekeeping items in order:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Clone the GitHub repo and navigate into the project's folder.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If you have already done this, update your local branch:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git fetch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git pull origin develop")))))),(0,r.kt)("li",{parentName:"ul"},'Install the OpenBB Platform in "editable" mode.',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cd openbb_platform")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"python dev_install.py -e")))),(0,r.kt)("li",{parentName:"ul"},"Rebuild the Python interface and static assets.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"import openbb")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openbb.build()")))),(0,r.kt)("li",{parentName:"ul"},"Create a new local branch (pick a relevant name and use dashes for multiple words), always beginning with ",(0,r.kt)("inlineCode",{parentName:"li"},"feature/"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git checkout -b feature/av-historical-eps")))))),(0,r.kt)("p",null,"Let's get started!"),(0,r.kt)("h2",{id:"identify-whats-being-added"},"Identify What's Being Added"),(0,r.kt)("p",null,"For this example, we will be adding a user-requested data set from AlphaVantage, historical EPS. There is an existing ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenBB-finance/OpenBBTerminal/issues/6104"},"GitHub issue")," that we will link to in the submitted pull request. By linking the issue, it will be closed automatically on merge."),(0,r.kt)("p",null,"Here's what we know about this AlphaVantage API endpoint:"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This API returns the annual and quarterly earnings (EPS) for the company of interest.\nQuarterly data also includes analyst estimates and surprise metrics.")),(0,r.kt)("h3",{id:"provider-api-documentation"},"Provider API Documentation"),(0,r.kt)("p",null,"The documentation for this endpoint is, ",(0,r.kt)("a",{parentName:"p",href:"https://www.alphavantage.co/documentation/#earnings"},"https://www.alphavantage.co/documentation/#earnings"),".  This link will be added to the query parameters model docstring."),(0,r.kt)("h3",{id:"base-url"},"Base URL"),(0,r.kt)("p",null,"The base URL structure will be different for each provider, AlphaVantage identifies a ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," for each request as the first parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'BASE_URL = "https://www.alphavantage.co/query?function=EARNINGS&"\n')),(0,r.kt)("h3",{id:"source-parameters"},"Source Parameters"),(0,r.kt)("p",null,"Ignoring ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"api_key"),", there is only one parameter for this function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'symbol: str = "IBM"\n')),(0,r.kt)("h3",{id:"source-response"},"Source Response"),(0,r.kt)("p",null,"They provide a sample JSON output, returning both annual and quarterly data in the same response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "symbol": "IBM",\n    "annualEarnings": [\n        {\n            "fiscalDateEnding": "2023-12-31",\n            "reportedEPS": "9.61"\n        },\n        {\n            "fiscalDateEnding": "2022-12-31",\n            "reportedEPS": "9.12"\n        },\n    ],\n    "quarterlyEarnings": [\n        {\n            "fiscalDateEnding": "2023-12-31",\n            "reportedDate": "2024-01-24",\n            "reportedEPS": "3.87",\n            "estimatedEPS": "3.78",\n            "surprise": "0.09",\n            "surprisePercentage": "2.381"\n        },\n        {\n            "fiscalDateEnding": "2023-09-30",\n            "reportedDate": "2023-10-25",\n            "reportedEPS": "2.2",\n            "estimatedEPS": "2.13",\n            "surprise": "0.07",\n            "surprisePercentage": "3.2864"\n        },\n    ],\n}\n')),(0,r.kt)("p",null,"Here's what we know about the existing router endpoint and standard model:"),(0,r.kt)("h3",{id:"openbb-endpoint"},"OpenBB Endpoint"),(0,r.kt)("p",null,"The function we are adding AlphaVantage as a source to is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from openbb import obb\n\nobb.equity.fundamental.historical_eps(symbol = "IBM", limit=5, provider="fmp")\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"date"),(0,r.kt)("th",{parentName:"tr",align:"left"},"symbol"),(0,r.kt)("th",{parentName:"tr",align:"right"},"eps_actual"),(0,r.kt)("th",{parentName:"tr",align:"right"},"eps_estimated"),(0,r.kt)("th",{parentName:"tr",align:"right"},"revenue_estimated"),(0,r.kt)("th",{parentName:"tr",align:"right"},"revenue_actual"),(0,r.kt)("th",{parentName:"tr",align:"left"},"reporting_time"),(0,r.kt)("th",{parentName:"tr",align:"left"},"updated_at"),(0,r.kt)("th",{parentName:"tr",align:"left"},"period_ending"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-01-24"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"3.87"),(0,r.kt)("td",{parentName:"tr",align:"right"},"3.78"),(0,r.kt)("td",{parentName:"tr",align:"right"},"17298500000"),(0,r.kt)("td",{parentName:"tr",align:"right"},"17381000000"),(0,r.kt)("td",{parentName:"tr",align:"left"},"amc"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-02-29"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-12-31")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-04-17"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.59"),(0,r.kt)("td",{parentName:"tr",align:"right"},"14572800000"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"bmo"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-02-29"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-03-30")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-07-24"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"amc"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-02-29"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-06-30")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-10-23"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"amc"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-02-29"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-09-30")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2025-01-22"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"amc"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-02-29"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-12-31")))),(0,r.kt)("p",null,"FMP is currently the only source for this endpoint. There are only two parameters, ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"limit"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"limit")," argument determines how many quarters to go back."),(0,r.kt)("h3",{id:"standard-model"},"Standard Model"),(0,r.kt)("p",null,"The standard model is defined by, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openbb.co/platform/data_models/HistoricalEps"},"HistoricalEps"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from openbb_core.provider.standard_models.historical_eps import HistoricalEpsData, HistoricalEpsQueryParams\n")),(0,r.kt)("p",null,"Each standard model consists of two classes, ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryParams")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Data"),". The name of each model begins with a CamelCase representation of the endpoint, ",(0,r.kt)("inlineCode",{parentName:"p"},"HistoricalEps"),", with some instances warranting abbreviations. Files are always named with lower snake_case."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HistoricalEps")," is what we will reference in the router when we get there."),(0,r.kt)("h3",{id:"standard-queryparams"},"Standard QueryParams"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"HistoricalEpsQueryParams")," model defines only one parameter, ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol"),". It includes a validation method for converting the symbol to upper case."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class HistoricalEpsQueryParams(QueryParams):\n    """Historical EPS Query."""\n\n    symbol: str = Field(description=QUERY_DESCRIPTIONS.get("symbol", ""))\n\n    @field_validator("symbol", mode="before", check_fields=False)\n    @classmethod\n    def upper_symbol(cls, v: str) -> str:\n        """Convert symbol to uppercase."""\n        return v.upper()\n')),(0,r.kt)("p",null,"We will inherit from this class to create our QueryParams model, specific to AlphaVantage. The model will be named, ",(0,r.kt)("inlineCode",{parentName:"p"},"AlphaVantageHistoricalEpsQueryParams"),". Don't worry about it being too long."),(0,r.kt)("h3",{id:"standard-data"},"Standard Data"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"HistoricalEpsData")," model defines some fields, with two being mandatory: ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol"),". It includes a validation method for converting the date from an ISO string to a datetime object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class HistoricalEpsData(Data):\n    """Historical EPS Data."""\n\n    date: dateType = Field(default=None, description=DATA_DESCRIPTIONS.get("date", ""))\n    symbol: str = Field(description=DATA_DESCRIPTIONS.get("symbol", ""))\n    announce_time: Optional[str] = Field(\n        default=None, description="Timing of the earnings announcement."\n    )\n    eps_actual: Optional[float] = Field(\n        default=None, description="Actual EPS from the earnings date."\n    )\n    eps_estimated: Optional[float] = Field(\n        default=None, description="Estimated EPS for the earnings date."\n    )\n\n    @field_validator("date", mode="before", check_fields=False)\n    def date_validate(cls, v):  # pylint: disable=E0213\n        """Return formatted datetime."""\n        return parser.isoparse(str(v))\n')),(0,r.kt)("p",null,"Now we know exactly what is going to be added, and how we should structure our query to fetch the data. This endpoint is not overly complex but harmonizing many input parameters, and the potentially endless data fields, across many providers is a challenge."),(0,r.kt)("p",null,"So far, we have knocked out three of the outlined tasks."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Catalogue the parameters and returned fields from the chosen data provider."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Find the existing standard model that is mapped to the router endpoint."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Identify common parameters and fields to map.")),(0,r.kt)("p",null,"Let's get on with the fun stuff and start building!"),(0,r.kt)("h2",{id:"build-the-provider-model"},"Build the Provider Model"),(0,r.kt)("h3",{id:"create-a-new-file"},"Create a New File"),(0,r.kt)("p",null,"The first step is to create a new file in the provider extension folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"~/OpenBBTerminal/openbb_platform/providers/alpha_vantage/openbb_alpha_vantage/models\n")),(0,r.kt)("p",null,"We will call this file: ",(0,r.kt)("inlineCode",{parentName:"p"},"historical_eps.py")),(0,r.kt)("p",null,"The first line of the file should be a docstring, followed by the import statements."),(0,r.kt)("h3",{id:"import-statements"},"Import Statements"),(0,r.kt)("p",null,"Every model will be different, but most items below will be typical of nearly every data provider model. Variations will come from design choices for ",(0,r.kt)("a",{parentName:"p",href:"/platform/development/contributing/http_requests"},"HTTP requests"),", or other requirements. We won't get into that here though."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""AlphaVantage Historical EPS Model."""\n\n# pylint: disable=unused-argument\n\nfrom datetime import date as dateType\nfrom typing import Any, Dict, List, Literal, Optional\nfrom warnings import warn\n\nfrom openbb_core.provider.abstract.fetcher import Fetcher\nfrom openbb_core.provider.standard_models.historical_eps import (\n    HistoricalEpsData,\n    HistoricalEpsQueryParams,\n)\nfrom openbb_core.provider.utils.descriptions import QUERY_DESCRIPTIONS\nfrom openbb_core.provider.utils.errors import EmptyDataError\nfrom openbb_core.provider.utils.helpers import (\n    ClientResponse,\n    ClientSession,\n    amake_requests\n)\nfrom pydantic import Field, field_validator\n')),(0,r.kt)("h3",{id:"define-the-queryparams"},"Define The QueryParams"),(0,r.kt)("p",null,"Define a class that inherits from the standard model's ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryParams")," and put a link to the source documentation, if it exists, in the docstring."),(0,r.kt)("p",null,"We'll define a field to return either, ",(0,r.kt)("inlineCode",{parentName:"p"},"annualEarnings")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"quarterlyEarnings"),". Other endpoints call this parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"period"),", so we will do the same here. Adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"limit")," parameter will provide more flexibility, even though we can't control that from the source."),(0,r.kt)("p",null,"If a parameter is common, like ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"period")," are, they will have a standardized description. The ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," will display in the function's signature and Fast API Swagger docs."),(0,r.kt)("p",null,"To allow multiple items in a query parameters field - i.e, a list of tickers - we can add the ",(0,r.kt)("inlineCode",{parentName:"p"},"__json_schema_extra__")," dictionary to the top of the model. If there are any fields to map on output, define them with the ",(0,r.kt)("inlineCode",{parentName:"p"},"__alias_dict__")," dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class AlphaVantageHistoricalEpsQueryParams(HistoricalEpsQueryParams):\n    """\n    AlphaVantage Historical EPS Query Params.\n\n    Source: https://www.alphavantage.co/documentation/#earnings\n    """\n\n    __json_schema_extra__ = {"symbol": ["multiple_items_allowed"]}\n\n    period: Literal["annual", "quarter"] = Field(\n        default="quarter", description=QUERY_DESCRIPTIONS.get("period", "")\n    )\n    limit: Optional[int] = Field(\n        default=None, description=QUERY_DESCRIPTIONS.get("limit", "")\n    )\n')),(0,r.kt)("h3",{id:"define-the-data-model"},"Define The Data Model"),(0,r.kt)("p",null,"In the sample output data from AlphaVantage, we know that there are two date fields; however, only 'fiscalDateEnding' is returned in both time intervals. This makes it the right candidate to map to the ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," field in the standard model."),(0,r.kt)("p",null,"Mapping is done via ",(0,r.kt)("inlineCode",{parentName:"p"},"__alias_dict__"),", a dictionary defined at the top of the class before any fields. Leave it out if there's nothing to map."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If a field represents a percent, we want to always return it as a normalized decimal value - i.e, 1% is 0.01 - so that downstream processes can use values directly in formulas without needing to figure out if 1 means 1% or 100%."),(0,r.kt)("p",{parentName:"admonition"},"If the data source returns the numbers (or null values) as a string (maybe with a % character), we will clean it using a ",(0,r.kt)("inlineCode",{parentName:"p"},"field_validator"),"."),(0,r.kt)("p",{parentName:"admonition"},"We communicate this to the frontend, via ",(0,r.kt)("inlineCode",{parentName:"p"},"json_schema_extra"),", in the field definition so the values can be correctly displayed."),(0,r.kt)("p",{parentName:"admonition"},"By ensuring this small detail, we contribute to the overall standardization of data.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class AlphaVantageHistoricalEpsData(HistoricalEpsData):\n    """AlphaVantage Historical EPS Data."""\n\n    __alias_dict__ = {\n        "date": "fiscalDateEnding",\n        "eps_actual": "reportedEPS",\n        "eps_estimated": "estimatedEPS",\n        "surprise_percent": "surprisePercentage",\n        "reported_date": "reportedDate",\n    }\n\n    surprise: Optional[float] = Field(\n        default=None,\n        description="Surprise in EPS (Actual - Estimated).",\n    )\n    surprise_percent: Optional[float] = Field(\n        default=None,\n        description="EPS surprise as a normalized percent.",\n        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},\n    )\n    reported_date: Optional[dateType] = Field(\n        default=None,\n        description="Date of the earnings report.",\n    )\n\n    @field_validator(\n        "eps_estimated",\n        "eps_actual",\n        "surprise",\n        mode="before",\n        check_fields=False,\n    )\n    @classmethod\n    def validate_null(cls, v):\n        """Clean None returned as a string."""\n        return None if str(v).strip() == "None" or str(v) == "0" else v\n\n    @field_validator("surprise_percent", mode="before", check_fields=False)\n    @classmethod\n    def normalize_percent(cls, v):\n        """Normalize percent values."""\n        if isinstance(v, str) and v == "None" or str(v) == "0":\n            return None\n        return float(v) / 100\n')),(0,r.kt)("h3",{id:"build-the-fetcher-class"},"Build the Fetcher Class"),(0,r.kt)("p",null,"Provider models have a total of three classes, ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryParams"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Data"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Fetcher"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"Fetcher")," is what gets executed by the router and divides the request into three distinct processes that can be serviced individually. We define it as a Transform-Extract-Transform (TET) process because we:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Transform the query from the user input into the specific format required for each provider."),(0,r.kt)("li",{parentName:"ul"},"Extract the data from the provider endpoint."),(0,r.kt)("li",{parentName:"ul"},"Transform the data into a standard format (the model or a list of models).")),(0,r.kt)("p",null,"Each process is a static method, and breaking it down makes it easier to debug any points of failure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class AVHistoricalEpsFetcher(\n    Fetcher[\n        AlphaVantageHistoricalEpsQueryParams,\n        List[AlphaVantageHistoricalEpsData]\n    ]\n):\n    """AlphaVantage Historical EPS Fetcher."""\n\n    @staticmethod\n    def transform_query(params: Dict[str, Any]) -> AlphaVantageHistoricalEpsQueryParams:\n        """Transform the query params."""\n        # If no transformations are required, simply return the validated model.\n        return AlphaVantageHistoricalEpsQueryParams(**params)\n\n    @staticmethod\n    async def aextract_data(\n        query: AlphaVantageHistoricalEpsQueryParams,\n        credentials: Optional[Dict[str, str]],\n        **kwargs: Any,\n    ) -> List[Dict]:\n        """Return the raw data from the AlphaVantage endpoint."""\n\n        api_key = credentials.get("alpha_vantage_api_key") if credentials else "DEMO"\n\n        BASE_URL = "https://www.alphavantage.co/query?function=EARNINGS&"\n\n        # We are allowing multiple symbols to be passed in the query, so we need to handle that.\n        symbols = query.symbol.split(",")\n\n        urls = [\n            f"{BASE_URL}symbol={symbol}&apikey={api_key}" for symbol in symbols\n        ]\n\n        results = []\n\n        # We need to make a custom callback function for this async request.\n        async def response_callback(response: ClientResponse, _: ClientSession):\n            """Response callback function."""\n            symbol = response.url.query.get("symbol", None)\n            data = await response.json()\n            target = "annualEarnings" if query.period == "annual" else "quarterlyEarnings"\n            result = []\n            # If data is returned, append it to the results list.\n            if data:\n                result = [\n                    {\n                        "symbol": symbol,\n                        **d,\n                    }\n                    for d in data.get(target, [])  # type: ignore\n                ]\n                if query.limit is not None:\n                    results.extend(result[:query.limit])\n                else:\n                    results.extend(result)\n\n            # If no data is returned, raise a warning and move on to the next symbol.\n            if not data:\n                warn(f"Symbol Error: No data found for {symbol}")\n\n        await amake_requests(urls, response_callback, **kwargs)  # type: ignore\n\n        return results\n\n    @staticmethod\n    def transform_data(\n        query: AlphaVantageHistoricalEpsQueryParams,\n        data: List[Dict],\n        **kwargs: Any,\n    ) -> List[AlphaVantageHistoricalEpsData]:\n        """Transform the raw data into the standard model."""\n        if not data:\n            raise EmptyDataError("No data found.")\n        return [AlphaVantageHistoricalEpsData.model_validate(d) for d in data]\n')),(0,r.kt)("p",null,"Combining all of the code blocks above, beginning with the import statements section, makes a complete file and we have finished step 4."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Build the provider models and Fetcher class by inheriting from the standard models.")),(0,r.kt)("h2",{id:"map-to-router"},"Map To Router"),(0,r.kt)("p",null,"Mapping to the router is done in the ",(0,r.kt)("inlineCode",{parentName:"p"},"__init__.py")," file, one folder back from the ",(0,r.kt)("inlineCode",{parentName:"p"},"models")," folder where we created the ",(0,r.kt)("inlineCode",{parentName:"p"},"historical_eps.py")," file."),(0,r.kt)("p",null,"We import the ",(0,r.kt)("inlineCode",{parentName:"p"},"Fetcher")," that was created, and then map it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetcher_dict")," property of the Provider class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""Alpha Vantage Provider module."""\n\nfrom openbb_alpha_vantage.models.equity_historical import AVEquityHistoricalFetcher\nfrom openbb_alpha_vantage.models.historical_eps import AVHistoricalEpsFetcher\nfrom openbb_core.provider.abstract.provider import Provider\n\nalpha_vantage_provider = Provider(\n    name="alpha_vantage",\n    website="https://www.alphavantage.co/documentation/",\n    description="""Alpha Vantage provides realtime and historical\n    financial market data through a set of powerful and developer-friendly data APIs\n    and spreadsheets. From traditional asset classes (e.g., stocks, ETFs, mutual funds)\n    to economic indicators, from foreign exchange rates to commodities,\n    from fundamental data to technical indicators, Alpha Vantage\n    is your one-stop-shop for enterprise-grade global market data delivered through\n    cloud-based APIs, Excel, and Google Sheets. """,\n    credentials=["api_key"],\n    fetcher_dict={\n        "EquityHistorical": AVEquityHistoricalFetcher,\n        "HistoricalEps": AVHistoricalEpsFetcher,\n    },\n)\n')),(0,r.kt)("p",null,"Step 5 is complete."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Map the new provider model to the router.")),(0,r.kt)("h2",{id:"rebuild-static-assets"},"Rebuild Static Assets"),(0,r.kt)("p",null,"When modifying router components or model definitions, the Python interface needs to be rebuilt before use. Open a terminal, with the ",(0,r.kt)("inlineCode",{parentName:"p"},"obb")," environment active, start a new Python session, and enter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import openbb\n\nopenbb.build()\n\nexit()\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If changes are only made to the static methods within the Fetcher, rebuilding is not required. Restart the Python interpreter to apply the edits.")),(0,r.kt)("p",null,"Step 6 is done."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Rebuild the Python interface and static assets.")),(0,r.kt)("p",null,"We can now run the function and test our work."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from openbb import obb\n\nobb.equity.fundamental.historical_eps(\n    symbol=["IBM","GOOG","AAPL","MSFT"],\n    period="quarter",\n    provider="alpha_vantage",\n    limit=1\n).to_df()\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"date"),(0,r.kt)("th",{parentName:"tr",align:"left"},"symbol"),(0,r.kt)("th",{parentName:"tr",align:"right"},"eps_actual"),(0,r.kt)("th",{parentName:"tr",align:"right"},"eps_estimated"),(0,r.kt)("th",{parentName:"tr",align:"right"},"surprise"),(0,r.kt)("th",{parentName:"tr",align:"right"},"surprise_percent"),(0,r.kt)("th",{parentName:"tr",align:"left"},"reported_date"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-12-31"),(0,r.kt)("td",{parentName:"tr",align:"left"},"GOOG"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.59"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.05"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.031447"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-01-30")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-12-31"),(0,r.kt)("td",{parentName:"tr",align:"left"},"AAPL"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2.18"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2.1"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.08"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.038095"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-02-01")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-12-31"),(0,r.kt)("td",{parentName:"tr",align:"left"},"MSFT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2.93"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2.78"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.15"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.053957"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-01-30")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-12-31"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"3.87"),(0,r.kt)("td",{parentName:"tr",align:"right"},"3.78"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.09"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.02381"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2024-01-24")))),(0,r.kt)("p",null,"Checking the ",(0,r.kt)("inlineCode",{parentName:"p"},"annual")," setting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'obb.equity.fundamental.historical_eps(\n    symbol="AAPL,\n    period="annual",\n    provider="alpha_vantage",\n    limit=4\n).to_df()\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"date"),(0,r.kt)("th",{parentName:"tr",align:"left"},"symbol"),(0,r.kt)("th",{parentName:"tr",align:"right"},"eps_actual"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2021-09-30"),(0,r.kt)("td",{parentName:"tr",align:"left"},"AAPL"),(0,r.kt)("td",{parentName:"tr",align:"right"},"5.62")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2022-09-30"),(0,r.kt)("td",{parentName:"tr",align:"left"},"AAPL"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6.11")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-09-30"),(0,r.kt)("td",{parentName:"tr",align:"left"},"AAPL"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6.12")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-12-31"),(0,r.kt)("td",{parentName:"tr",align:"left"},"AAPL"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2.18")))),(0,r.kt)("p",null,"We can see that the most recent ",(0,r.kt)("inlineCode",{parentName:"p"},"annual")," data point only represent the first quarter of Apple's fiscal year, and this is something to keep in mind while working with the data."),(0,r.kt)("p",null,"To check that the warning is being transmitted, enter a bad symbol in the list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'obb.equity.fundamental.historical_eps(symbol="AAPL,BAD_SYMBOL", provider="alpha_vantage").warnings\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"[Warning_(category='UserWarning', message='Symbol Error: No data found for BAD_SYMBOL')]\n")),(0,r.kt)("p",null,"With confidence that the endpoint is working as expected, let's move on to unit and integration tests."),(0,r.kt)("h2",{id:"add-tests"},"Add Tests"),(0,r.kt)("p",null,"Adding tests doesn't take a lot of effort. In most cases, copying and pasting from an existing one will do the job."),(0,r.kt)("h3",{id:"unit-tests"},"Unit Tests"),(0,r.kt)("p",null,"Unit tests are located in the provider extension folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"~/OpenBBTerminal/openbb_platform/providers/alpha_vantage/tests\n")),(0,r.kt)("p",null,"There will be one test file dedicated to testing each fetcher in the provider extension. Our file is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"test_alpha_vantage_fetchers.py\n")),(0,r.kt)("p",null,"The unit tests leverage the Fetcher class' built-in testing methods. It checks that the data is being returned, that types are conformed to their definitions, and that the model validates. It relies on ",(0,r.kt)("inlineCode",{parentName:"p"},"pytest")," and captures a HTTP cassette. Here's what our test file will look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import date\n\nimport pytest\nfrom openbb_alpha_vantage.models.equity_historical import AVEquityHistoricalFetcher\nfrom openbb_alpha_vantage.models.historical_eps import AVHistoricalEpsFetcher\nfrom openbb_core.app.service.user_service import UserService\n\ntest_credentials = UserService().default_user_settings.credentials.model_dump(\n    mode="json"\n)\n\n\n@pytest.fixture(scope="module")\ndef vcr_config():\n    return {\n        "filter_headers": [("User-Agent", None)],\n        "filter_query_parameters": [\n            ("apikey", "MOCK_API_KEY"),\n        ],\n    }\n\n\n@pytest.mark.record_http\ndef test_av_equity_historical_fetcher(credentials=test_credentials):\n    params = {\n        "symbol": "AAPL",\n        "start_date": date(2023, 1, 1),\n        "end_date": date(2023, 1, 10),\n        "interval": "15m",\n    }\n\n    fetcher = AVEquityHistoricalFetcher()\n    result = fetcher.test(params, credentials)\n    assert result is None\n\n\n@pytest.mark.record_http\ndef test_av_historical_eps_fetcher(credentials=test_credentials):\n    params = {\n        "symbol": "AAPL,MSFT",\n        "period": "quarter",\n        "limit": 4\n    }\n\n    fetcher = AVHistoricalEpsFetcher()\n    result = fetcher.test(params, credentials)\n    assert result is None\n')),(0,r.kt)("p",null,"That's all there is to it, we can capture the cassette now. Open a terminal, navigate into the ",(0,r.kt)("inlineCode",{parentName:"p"},"tests")," folder from above, with the ",(0,r.kt)("inlineCode",{parentName:"p"},"obb")," environment active, and enter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pytest test_alpha_vantage_fetchers.py --record http --record-no-overwrite\n")),(0,r.kt)("p",null,"A successful test will result in a file being created in the ",(0,r.kt)("inlineCode",{parentName:"p"},"record")," subfolder. Check the file for any obvious errors."),(0,r.kt)("p",null,"Step 7 is done."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Add unit tests.")),(0,r.kt)("h3",{id:"integration-tests"},"Integration Tests"),(0,r.kt)("p",null,"Integration tests are even easier to add here, we just need to add a set of parameters for the new provider to the existing test. These tests are located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"extensions")," folder, where the routers are, under ",(0,r.kt)("inlineCode",{parentName:"p"},"integration"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"~/OpenBBTerminal/openbb_platform/extensions/equity/integration\n")),(0,r.kt)("p",null,"There are two files here, one for the Python interface, and the other for the Fast API."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test_equity_python.py")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test_equity_api.py"))),(0,r.kt)("p",null,"There will be at least one test for every router endpoint, which expects all providers and parameters to be supplied. The structure will be the same for all functions. Snippets below will include the import statements, setup, and our function - ",(0,r.kt)("inlineCode",{parentName:"p"},"historical_eps"),"."),(0,r.kt)("h4",{id:"python-test"},"Python Test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""Python interface integration tests for the equity extension."""\n\nfrom datetime import time\n\nimport pytest\nfrom extensions.tests.conftest import parametrize\nfrom openbb_core.app.model.obbject import OBBject\n\n# pylint: disable=too-many-lines,redefined-outer-name\n\n\n# pylint: disable=import-outside-toplevel,inconsistent-return-statements\n@pytest.fixture(scope="session")\ndef obb(pytestconfig):\n    """Fixture to setup obb."""\n    if pytestconfig.getoption("markexpr") != "not integration":\n        import openbb\n\n        return openbb.obb\n\n@parametrize(\n    "params",\n    [\n        ({"symbol": "AAPL", "limit": 5, "provider": "fmp"}),\n        (\n            {\n                "symbol": "AAPL",\n                "period": "quarter",\n                "limit": 5,\n                "provider": "alpha_vantage"\n            }\n        ),\n    ],\n)\n@pytest.mark.integration\ndef test_equity_fundamental_historical_eps(params, obb):\n    params = {p: v for p, v in params.items() if v}\n\n    result = obb.equity.fundamental.historical_eps(**params)\n    assert result\n    assert isinstance(result, OBBject)\n    assert len(result.results) > 0\n')),(0,r.kt)("p",null,"Run this test by navigating into the folder above and entering:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"pytest test_equity_python.py\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If tests not related to the items being touched directly are failing, don't worry about them. That's out of scope.")),(0,r.kt)("h4",{id:"api-test"},"API Test"),(0,r.kt)("p",null,"The API test is slightly different, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," can be copied and pasted from the Python test. In addition to basic checks, it will fail when values returned are not JSON serializable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""API integration tests for equity extension."""\n\nimport base64\nfrom datetime import time\n\nimport pytest\nimport requests\nfrom extensions.tests.conftest import parametrize\nfrom openbb_core.env import Env\nfrom openbb_core.provider.utils.helpers import get_querystring\n\n# pylint: disable=too-many-lines,redefined-outer-name\n\n\n@pytest.fixture(scope="session")\ndef headers():\n    userpass = f"{Env().API_USERNAME}:{Env().API_PASSWORD}"\n    userpass_bytes = userpass.encode("ascii")\n    base64_bytes = base64.b64encode(userpass_bytes)\n\n    return {"Authorization": f"Basic {base64_bytes.decode(\'ascii\')}"}\n\n\n@parametrize(\n    "params",\n    [\n        ({"symbol": "AAPL", "limit": 5, "provider": "fmp"}),\n        (\n            {\n                "symbol": "AAPL",\n                "period": "quarter",\n                "limit": 5,\n                "provider": "alpha_vantage"\n            }\n        ),\n    ],\n)\n@pytest.mark.integration\ndef test_equity_fundamental_historical_eps(params, headers):\n    params = {p: v for p, v in params.items() if v}\n\n    query_str = get_querystring(params, [])\n    url = f"http://0.0.0.0:8000/api/v1/equity/fundamental/historical_eps?{query_str}"\n    result = requests.get(url, headers=headers, timeout=10)\n    assert isinstance(result, requests.Response)\n    assert result.status_code == 200\n')),(0,r.kt)("p",null,"To run this test, we will need to open a second terminal and start the server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"uvicorn openbb_core.api.rest_api:app\n")),(0,r.kt)("p",null,"Go back to the other terminal and run the test by entering:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"pytest test_equity_api.py\n")),(0,r.kt)("p",null,"Step 8 is done."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Add integration tests.")),(0,r.kt)("p",null,"All that's left now is to submit the work as a pull request for review."),(0,r.kt)("h2",{id:"submit-a-pull-request"},"Submit A Pull Request"),(0,r.kt)("p",null,"We're already on the correct branch, ",(0,r.kt)("inlineCode",{parentName:"p"},"feature/av-historical-eps"),", but it may be out-of-sync with the ",(0,r.kt)("inlineCode",{parentName:"p"},"develop")," branch. Let's update it just to be sure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"git fetch\ngit pull origin develop\n")),(0,r.kt)("h3",{id:"linters"},"Linters"),(0,r.kt)("p",null,"Before opening a pull request, run the linters over all files that were touched."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"black"),(0,r.kt)("li",{parentName:"ul"},"ruff"),(0,r.kt)("li",{parentName:"ul"},"mypy"),(0,r.kt)("li",{parentName:"ul"},"pylint")),(0,r.kt)("p",null,"Fix all items, and valid fixes for ",(0,r.kt)("inlineCode",{parentName:"p"},"pylint")," can be disabling on that line. It won't always know what is contextually correct."),(0,r.kt)("h3",{id:"add-files-to-commit"},"Add Files To Commit"),(0,r.kt)("p",null,"When preparing to commit changes to the local branch, only add the files directly touched. Here are all the files we touched in this process:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openbb_platform/providers/alpha_vantage/openbb_alpha_vantage/models/historical_eps.py")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openbb_platopenbb_platform/providers/alpha_vantage/openbb_alpha_vantage/__init__.py")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openbb_platform/providers/alpha_vantage/tests/test_alpha_vantage_fetchers.py")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openbb_platform/providers/alpha_vantage/tests/record/test_av_historical_eps_fetchers.yaml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openbb_platform/extensions/equity/integration/test_equity_api.py")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openbb_platform/extensions/equity/integration/test_equity_python.py"))),(0,r.kt)("h3",{id:"install-pre-commit-hooks"},"Install Pre-Commit Hooks"),(0,r.kt)("p",null,"The pre-commit hooks will run the testing suite locally before the commit is made. Install them from the root of the GitHub project folder, ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenBBTerminal"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"pre-commit install\n")),(0,r.kt)("h3",{id:"commit-changes"},"Commit Changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'git commit -m "adds AlphaVantage to historical_eps"\n')),(0,r.kt)("h3",{id:"push-changes"},"Push Changes"),(0,r.kt)("p",null,"Assuming the commit is successful, push the changes to the remote branch."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"git push --set-upstream origin feature/av-historical-eps\n")),(0,r.kt)("h3",{id:"open-a-pull-request"},"Open a Pull Request"),(0,r.kt)("p",null,"A pull request, in general, should have details on why the PR was created, what the changes are, what the impact is to existing users and infrastructure, how it was tested, and any other relevant information for reviewers and maintainers to consider."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Why"),"? (1-3 sentences or a bullet point list):"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This PR is the result of a development documentation page created (not in this PR).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Closes #6104, a user feature request.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"What"),"? (1-3 sentences or a bullet point list):"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Adds AlphaVantage as a provider to ",(0,r.kt)("inlineCode",{parentName:"li"},"obb.equity.fundamental.historical_eps()")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Impact")," (1-2 sentences or a bullet point list):"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Is not a breaking change.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Does not introduce any changes other than adding the provider to this endpoint.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Testing Done"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Created unit test and integration tests.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Used a variety of symbols, single and lists, to check that the EmptyDataError and symbol warnings are catching correctly."))))),(0,r.kt)("h3",{id:"enjoy"},"Enjoy"),(0,r.kt)("p",null,"With this final step, we have completed all the tasks outlined at the top of the page. Thank you for your contributions!"),(0,r.kt)("p",null,"This guide was based on a true story, see the pull request ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenBB-finance/OpenBBTerminal/pull/6155"},"here")))}c.isMDXComponent=!0}}]);