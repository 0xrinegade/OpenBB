"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[74832],{89964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var a=t(74848),i=t(28453),r=t(94331);const s={title:"OpenBB Charting",sidebar_position:1,description:"This page introduces the optional openbb-charting extension.",keywords:["explanation","OpenBB Platform","Python client","Fast API","getting started","extensions","charting","view","Plotly","toolkits","community","Plotly","OpenBBFigure","PyWry"]},o=void 0,c={id:"platform/extensions/charting/index",title:"OpenBB Charting",description:"This page introduces the optional openbb-charting extension.",source:"@site/content/platform/extensions/charting/index.md",sourceDirName:"platform/extensions/charting",slug:"/platform/extensions/charting/",permalink:"/platform/extensions/charting/",draft:!1,unlisted:!1,editUrl:"https://github.com/OpenBB-finance/OpenBBTerminal/edit/main/website/content/platform/extensions/charting/index.md",tags:[],version:"current",lastUpdatedBy:"montezdesousa",lastUpdatedAt:171579722e4,sidebarPosition:1,frontMatter:{title:"OpenBB Charting",sidebar_position:1,description:"This page introduces the optional openbb-charting extension.",keywords:["explanation","OpenBB Platform","Python client","Fast API","getting started","extensions","charting","view","Plotly","toolkits","community","Plotly","OpenBBFigure","PyWry"]},sidebar:"tutorialSidebar",previous:{title:"Toolkits",permalink:"/platform/extensions/toolkit_extensions"},next:{title:"Examples",permalink:"/platform/extensions/charting/examples"}},l={},h=[{value:"Overview",id:"overview",level:2},{value:"How Does It Work?",id:"how-does-it-work",level:2},{value:"No Render",id:"no-render",level:3},{value:"What Endpoints Have Charts?",id:"what-endpoints-have-charts",level:2},{value:"Charting Functions",id:"charting-functions",level:3},{value:"Endpoints Without Charts",id:"endpoints-without-charts",level:2},{value:"Charts From Any Data",id:"charts-from-any-data",level:2},{value:"Tables",id:"tables",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.A,{title:"OpenBB Charting - Extensions | OpenBB Platform Docs"}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"openbb-charting"})," extension provides elements for building and displaying interactive charts, tables, dashboards, and more, directly from the OpenBB Platform's Python Interface and FAST API."]}),"\n",(0,a.jsx)(n.p,{children:"It allows users to create a custom view, without any previous experience working with Plotly, from any response served by the OpenBB Platform."}),"\n",(0,a.jsxs)(n.p,{children:["The Python Interface includes a custom ",(0,a.jsx)(n.a,{href:"https://github.com/OpenBB-finance/pywry",children:"PyWry"})," backend for displaying any content, in a WebKit HTML window served over ",(0,a.jsx)(n.code,{children:"localhost"}),". In an IDE setting, they will be rendered inline."]}),"\n",(0,a.jsxs)(n.p,{children:["To install, follow the instructions ",(0,a.jsx)(n.a,{href:"installation",children:"here"}),". The sections below provide a general explanation of the extension."]}),"\n",(0,a.jsx)(n.h2,{id:"how-does-it-work",children:"How Does It Work?"}),"\n",(0,a.jsxs)(n.p,{children:["It works by extending the ",(0,a.jsx)(n.code,{children:"OBBject"})," class with a new attribute, ",(0,a.jsx)(n.code,{children:"charting"}),". When it is installed, every response from the OpenBB Platform will be equipped with these tools."]}),"\n",(0,a.jsxs)(n.p,{children:["For functions that have pre-defined views, it serves as an intermediary between the user request and the response, activated when ",(0,a.jsx)(n.code,{children:"chart=True"}),". When a chart is created, it will populate the existing, ",(0,a.jsx)(n.code,{children:"chart"}),", attribute of the ",(0,a.jsx)(n.code,{children:"OBBject"}),". This is where it is served by the FAST API from the function request. In the Python Interface, charts can be generated post-request, regardless of ",(0,a.jsx)(n.code,{children:"chart=True"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"chart"})," attribute in the OBBject contains three items, responses from the API have two:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"fig"}),": The OpenBBFigure object - an extended Plotly GraphObjects class. Not included in the API response."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"content"}),": The Plotly JSON representation of the chart - Returned to the API."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"format"}),": The format of the chart - 'plotly' is currently the only charting library."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["There is one OBBject class method, ",(0,a.jsx)(n.code,{children:"show()"}),", which will display the contents of the ",(0,a.jsx)(n.code,{children:"chart"})," attribute, if populated."]}),"\n",(0,a.jsxs)(n.p,{children:["The new ",(0,a.jsx)(n.code,{children:"charting"})," attribute that binds to the OBBject also has a ",(0,a.jsx)(n.code,{children:"show()"})," method.  This differs in that it overwrites the existing chart, effectively a 'reset' for the view."]}),"\n",(0,a.jsxs)(n.p,{children:["The extension has a docstring, and it lists the class methods within ",(0,a.jsx)(n.code,{children:"charting"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from openbb import obb\ndata = obb.equity.price.historical("AAPL")\ndata.charting?\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"Charting extension.\n\nMethods\n-------\nshow\n    Display chart and save it to the OBBject.\nto_chart\n    Redraw the chart and save it to the OBBject, with an optional entry point for Data.\nfunctions\n    Return a list of Platform commands with charting functions.\nget_params\n    Return the charting parameters for the function the OBBject was created from.\nindicators\n    Return the list of the available technical indicators to use with the `to_chart` method and OHLC+V data.\ntable\n    Display an interactive table.\ncreate_line_chart\n    Create a line chart from external data.\ncreate_bar_chart\n    Create a bar chart, on a single x-axis with one or more values for the y-axis, from external data.\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:["When creating a chart directly from the OpenBB Platform endpoint, chart parameters must be passed as a nested dictionary under the name, ",(0,a.jsx)(n.code,{children:"chart_params"}),"."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'chart_params = dict(\n    title="AAPL 50/200 Day EMA",\n    indicators=dict(\n        ema=dict(length=[50,200]),\n    ),\n)\nparams = dict(\n    symbol="AAPL",\n    start_date="2022-01-01",\n    provider="yfinance",\n    chart=True,\n    chart_params=chart_params,\n)\ndata = obb.equity.price.historical(**params)\n'})}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"chart_params"})," are sent in the body of the request when using the API."]})]}),"\n",(0,a.jsxs)(n.p,{children:["Passing only ",(0,a.jsx)(n.code,{children:"chart=True"})," will return a default view which can be modified and drawn again post-request, via the ",(0,a.jsx)(n.code,{children:"OBBject"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"OBBject\n\nid: 06614d74-7443-7201-8000-a65f358136a3\nresults: [{'date': datetime.date(2022, 1, 3), 'open': 177.8300018310547, 'high': 18...\nprovider: yfinance\nwarnings: None\nchart: {'content': {'data': [{'close': [182.00999450683594, 179.6999969482422, 174....\nextra: {'metadata': {'arguments': {'provider_choices': {'provider': 'yfinance'}, 's...\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"data.show()\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/b427d68b-777e-4230-852a-df749c5dbc46",alt:"candles with ema"})}),"\n",(0,a.jsx)(n.h3,{id:"no-render",children:"No Render"}),"\n",(0,a.jsxs)(n.p,{children:["The charts can be created without opening the PyWry window, and this is the default behaviour when ",(0,a.jsx)(n.code,{children:"chart=True"}),".\nWith the ",(0,a.jsx)(n.code,{children:"charting.show()"})," and ",(0,a.jsx)(n.code,{children:"charting.to_chart()"})," methods, the default is ",(0,a.jsx)(n.code,{children:"render=True"}),".\nSetting as ",(0,a.jsx)(n.code,{children:"False"})," will return the chart to itself, populating the ",(0,a.jsx)(n.code,{children:"chart"})," attribute of OBBject."]}),"\n",(0,a.jsx)(n.h2,{id:"what-endpoints-have-charts",children:"What Endpoints Have Charts?"}),"\n",(0,a.jsxs)(n.p,{children:["The OpenBB Platform router, open_api.json, function signatures, and documentation are all generated based on your specific configuration. When the ",(0,a.jsx)(n.code,{children:"openbb-charting"}),' extension is installed, any function found in the "',(0,a.jsx)(n.a,{href:"https://github.com/OpenBB-finance/OpenBBTerminal/blob/develop/openbb_platform/obbject_extensions/charting/openbb_charting/charting_router.py",children:"charting_router"}),'" adds ',(0,a.jsx)(n.code,{children:"chart: bool = False"})," to the command on build. For example, ",(0,a.jsx)(n.code,{children:"obb.index.price.historical?"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"Signature:\nobb.index.price.historical(\n    symbol: Annotated[Union[str, List[str]], OpenBBCustomParameter(description='Symbol to get data for. Multiple comma separated items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.')],\n    ...\n    chart: typing.Annotated[bool, OpenBBCustomParameter(description='Whether to create a chart or not, by default False.')] = False,\n    **kwargs,\n) -> openbb_core.app.model.obbject.OBBject\n"})}),"\n",(0,a.jsx)(n.h3,{id:"charting-functions",children:"Charting Functions"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"charting"})," attribute of every command output has methods for identifying the charting functions and parameters.\nWhile able to serve JSON-serializable charts, the ",(0,a.jsx)(n.code,{children:"openbb-charting"})," extension is best-suited for use with the Python Interface. Much of the functionality is realized post-request."]}),"\n",(0,a.jsx)(n.p,{children:"Examine the extension by returning any command at all."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from openbb import obb\n\ndata = obb.equity.price.historical("SPY,QQQ,XLK,BTC-USD", provider="yfinance")\n\ndata.charting.functions()\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"['crypto_price_historical',\n 'currency_price_historical',\n 'economy_fred_series',\n 'equity_price_historical',\n 'equity_price_performance',\n 'etf_historical',\n 'etf_holdings',\n 'etf_price_performance',\n 'index_price_historical',\n 'technical_adx',\n 'technical_aroon',\n 'technical_cones',\n 'technical_ema',\n 'technical_hma',\n 'technical_macd',\n 'technical_rsi',\n 'technical_sma',\n 'technical_wma',\n 'technical_zlma']\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"The list above should, as shown here, should not be considered as the source of truth. It's just a sample."})}),"\n",(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"OBBject"})," in question has a dedicated charting function associated with it, parameters are detailed by the ",(0,a.jsx)(n.code,{children:"get_params()"})," method."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"EquityPriceHistoricalChartQueryParams\n\n    Parameters\n    ----------\n\n    data : Union[Data, list[Data], NoneType]\n        Filtered versions of the data contained in the original `self.results`.\n        Columns should be the same as the original data.\n        Example use is to reduce the number of columns, or the length of data, to plot.\n\n    title : Union[str, NoneType]\n        Title of the chart.\n\n    target : Union[str, NoneType]\n        The specific column to target.\n        If supplied, this will override the candles and volume parameters.\n\n    multi_symbol : bool\n        Flag to indicate whether the data contains multiple symbols.\n        This is mostly handled automatically, but if the chart fails to generate try setting this to True.\n\n    same_axis : bool\n        If True, forces all data to be plotted on the same axis.\n\n    normalize : bool\n        If True, the data will be normalized and placed on the same axis.\n\n    returns : bool\n        If True, the cumulative returns for the length of the time series will be calculated and plotted.\n\n    candles : bool\n        If True, and OHLC exists, and there is only one symbol in the data, candles will be plotted.\n\n    heikin_ashi : bool\n        If True, and `candles=True`, Heikin Ashi candles will be plotted.\n\n    volume : bool\n        If True, and volume exists, and `candles=True`, volume will be plotted.\n\n    indicators : Union[ChartIndicators, dict[str, dict[str, Any]], NoneType]\n        Indicators to be plotted, formatted as a dictionary.\n        Data containing multiple symbols will ignore indicators.\n        Example:\n            indicators = dict(\n                sma=dict(length=[20,30,50]),\n                adx=dict(length=14),\n                rsi=dict(length=14),\n            )\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Not all commands will have the same ",(0,a.jsx)(n.code,{children:"chart_params"}),", and some less than others, but it is always possible to redraw the chart with a different combination post-request. Here's what the default chart is from the output of the command above."]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"chart=True"})," was not specified, it will need to be created."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"data.charting.to_chart()\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/9231c455-ee1b-47a8-a627-b0034ea52ecd",alt:"obb.equity.price.historical()"})}),"\n",(0,a.jsx)(n.p,{children:"The extension recognized that multiple symbols were within the object, and made a determination to display cumulative returns by default."}),"\n",(0,a.jsx)(n.p,{children:"A candlestick chart will draw only when there is one symbol in the data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'obb.equity.price.historical(\n    symbol="XLK",\n    start_date="2024-01-01",\n    provider="yfinance",\n    chart=True,\n    chart_params=dict(title="XLK YTD", heikin_ashi=True)\n).show()\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/13af30b3-7298-402d-ac32-1f7700cd08fd",alt:"obb.equity.price.historical()"})}),"\n",(0,a.jsx)(n.h2,{id:"endpoints-without-charts",children:"Endpoints Without Charts"}),"\n",(0,a.jsxs)(n.p,{children:["Most functions do not have dedicated charts. However, it's still possible to generate one automatically. Using the ",(0,a.jsx)(n.code,{children:"data"})," above, we can try passing it through a quantitative analysis command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'data = obb.equity.price.historical(\n    symbol="XLK",\n    start_date="2023-01-01",\n    provider="yfinance",\n)\nqa = obb.quantitative.rolling.stdev(data.results, target="close")\n\nqa.charting.show(title="XLK Rolling 21 Day Standard Deviation")\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/f87a6648-7365-4529-a254-35897af448ca",alt:"auto chart"})}),"\n",(0,a.jsx)(n.h2,{id:"charts-from-any-data",children:"Charts From Any Data"}),"\n",(0,a.jsx)(n.p,{children:"There are methods for creating a generic chart from any external data.\nThey will bypass any data contained in the parent object, unless specifically fed into itself."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"charting.create_bar_chart()"}),"\n",(0,a.jsx)(n.li,{children:"charting.create_line_chart()"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"They can also be used as standalone components by initializing an empty instance of the OBBject class."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from openbb import obb\nfrom openbb_core.app.model.obbject import OBBject\ncreate_bar_chart = OBBject(results=None).charting.create_bar_chart\n\ncreate_bar_chart?\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:'Create a bar chart on a single x-axis with one or more values for the y-axis.\n\nParameters\n----------\ndata : Union[list, dict, pd.DataFrame, List[pd.DataFrame], pd.Series, List[pd.Series], np.ndarray, Data]\n    Data to plot.\nx : str\n    The x-axis column name.\ny : Union[str, List[str]]\n    The y-axis column name(s).\nbarmode : Literal["group", "stack", "relative", "overlay"], optional\n    The bar mode, by default "group".\nxtype : Literal["category", "multicategory", "date", "log", "linear"], optional\n    The x-axis type, by default "category".\ntitle : Optional[str], optional\n    The title of the chart, by default None.\nxtitle : Optional[str], optional\n    The x-axis title, by default None.\nytitle : Optional[str], optional\n    The y-axis title, by default None.\norientation : Literal["h", "v"], optional\n    The orientation of the chart, by default "v".\ncolors: Optional[List[str]], optional\n    Manually set the colors to cycle through for each column in \'y\', by default None.\nlayout_kwargs : Optional[Dict[str, Any]], optional\n    Additional keyword arguments to apply with figure.update_layout(), by default None.\n\nReturns\n-------\nOpenBBFigure\n    The OpenBBFigure object.\n'})}),"\n",(0,a.jsx)(n.h2,{id:"tables",children:"Tables"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"openbb-charting"})," extension is equipped with interactive tables, utilizing the React framework. They are displayed by using the ",(0,a.jsx)(n.code,{children:"table"})," method."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'data = obb.equity.price.quote("AAPL,MSFT,GOOGL,META,TSLA,AMZN", provider="yfinance")\ndata.charting.table()\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/77f5f812-b933-4ced-929c-c1e39b2a3eed",alt:"Interactive Tables"})}),"\n",(0,a.jsx)(n.p,{children:"External data can also be supplied, providing an opportunity to filter or apply Pandas operations before display."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'new_df = df.to_df().T\nnew_df.index.name="metric"\nnew_df.columns = new_df.loc["symbol"]\nnew_df.drop("symbol", inplace=True)\ndata.charting.table(data=new_df)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/d02f8c34-e1d1-4001-a73e-d3b948a4c5c1",alt:"Tables From External Data"})}),"\n",(0,a.jsx)(n.admonition,{type:"important",children:(0,a.jsx)(n.p,{children:"This does not alter the contents of the original object, the displayed data is a copy."})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},94331:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(5260),i=t(74848);function r(e){let{title:n}=e;return(0,i.jsx)(a.A,{children:(0,i.jsx)("title",{children:n})})}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);