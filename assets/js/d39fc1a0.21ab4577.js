"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[65911],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var i=a.createContext({}),p=function(t){var e=a.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=p(t.components);return a.createElement(i.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,i=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),u=p(n),k=r,m=u["".concat(i,".").concat(k)]||u[k]||d[k]||l;return n?a.createElement(m,o(o({ref:e},c),{},{components:n})):a.createElement(m,o({ref:e},c))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,o=new Array(l);o[0]=k;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s[u]="string"==typeof t?t:r,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},12885:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"load_options_chains",description:"OpenBB SDK Function"},o="load_options_chains",s={unversionedId:"sdk/reference/stocks/options/load_options_chains",id:"sdk/reference/stocks/options/load_options_chains",title:"load_options_chains",description:"OpenBB SDK Function",source:"@site/content/sdk/reference/stocks/options/load_options_chains.md",sourceDirName:"sdk/reference/stocks/options",slug:"/sdk/reference/stocks/options/load_options_chains",permalink:"/sdk/reference/stocks/options/load_options_chains",draft:!1,editUrl:"https://github.com/OpenBB-finance/OpenBBTerminal/edit/main/website/content/sdk/reference/stocks/options/load_options_chains.md",tags:[],version:"current",frontMatter:{title:"load_options_chains",description:"OpenBB SDK Function"},sidebar:"tutorialSidebar",previous:{title:"last_price",permalink:"/sdk/reference/stocks/options/last_price"},next:{title:"oi",permalink:"/sdk/reference/stocks/options/oi"}},i={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2}],c={toc:p},u="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"load_options_chains"},"load_options_chains"),(0,r.kt)("p",null,"Loads all options chains from a specific source, fields returned to each attribute will vary."),(0,r.kt)("p",null,"Source Code: [",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenBB-finance/OpenBBTerminal/tree/main/openbb_terminal/stocks/options/options_sdk_helper.py#L318"},"link"),"]"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"wordwrap",wordwrap:!0},'openbb.stocks.options.load_options_chains(symbol: str, source: str = "CBOE", date: str = "", pydantic: bool = False)\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"symbol"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},"The ticker symbol to load the data for."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},'The source for the data. Defaults to "CBOE". ','["CBOE", "Intrinio", "Nasdaq", "TMX", "Tradier", "YahooFinance"]'),(0,r.kt)("td",{parentName:"tr",align:null},"CBOE"),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"date"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},'The date for EOD chains data.  Only available for "Intrinio" and "TMX".'),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pydantic"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to return as a Pydantic Model or as a Pandas object.  Defaults to False."),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"True")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Options"),(0,r.kt)("td",{parentName:"tr",align:null},"chains: pd.DataFrame",(0,r.kt)("br",null),"    The complete options chain for the ticker.",(0,r.kt)("br",null),"expirations: list","[str]",(0,r.kt)("br",null),"    List of unique expiration dates. (YYYY-MM-DD)",(0,r.kt)("br",null),"strikes: list","[float]",(0,r.kt)("br",null),"    List of unique strike prices.",(0,r.kt)("br",null),"last_price: float",(0,r.kt)("br",null),"    The last price of the underlying asset.",(0,r.kt)("br",null),"underlying_name: str",(0,r.kt)("br",null),"    The name of the underlying asset.",(0,r.kt)("br",null),"underlying_price: pd.Series",(0,r.kt)("br",null),"    The price and recent performance of the underlying asset.",(0,r.kt)("br",null),"hasIV: bool",(0,r.kt)("br",null),"    Returns implied volatility.",(0,r.kt)("br",null),"hasGreeks: bool",(0,r.kt)("br",null),"    Returns greeks data.",(0,r.kt)("br",null),"symbol: str",(0,r.kt)("br",null),"    The symbol entered by the user.",(0,r.kt)("br",null),"source: str",(0,r.kt)("br",null),"    The source of the data.",(0,r.kt)("br",null),"date: str",(0,r.kt)("br",null),"    The date, when the chains data is historical EOD.",(0,r.kt)("br",null),"SYMBOLS: pd.DataFrame",(0,r.kt)("br",null),"    The symbol directory for the source, when available.",(0,r.kt)("br",null),(0,r.kt)("br",null),"Methods",(0,r.kt)("br",null),"-------",(0,r.kt)("br",null),"get_stats: Callable",(0,r.kt)("br",null),"    Function to return a table of summary statistics, by strike or by expiration.",(0,r.kt)("br",null),"get_straddle: Callable",(0,r.kt)("br",null),"    Function to calculate straddles and the payoff profile.",(0,r.kt)("br",null),"get_strangle: Callable",(0,r.kt)("br",null),"    Function to calculate strangles and the payoff profile.",(0,r.kt)("br",null),"get_vertical_call_spread: Callable",(0,r.kt)("br",null),"    Function to calculate vertical call spreads.",(0,r.kt)("br",null),"get_vertical_put_spreads: Callable",(0,r.kt)("br",null),"    Function to calculate vertical put spreads.",(0,r.kt)("br",null),"get_strategies: Callable",(0,r.kt)("br",null),"    Function for calculating multiple straddles and strangles at different expirations and moneyness.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Loads SPY data from CBOE, returns as a Pydantic Model, and displays the longest-dated expiration chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from openbb_terminal.sdk import openbb\nimport pandas as pd\ndata = openbb.stocks.options.load_options_chains("SPY", pydantic = True)\nchains = pd.DataFrame(data.chains)\nchains[chains["expiration"] == data.expirations[-1]]\n')),(0,r.kt)("p",null,"Loads QQQ data from Tradier as a Pydantic Model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from openbb_terminal.sdk import openbb\ndata = openbb.stocks.options.load_options_chains("QQQ", source = "Tradier", pydantic = True)\n')),(0,r.kt)("p",null,"Loads VIX data from YahooFinance as a Pandas object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from openbb_terminal.sdk import openbb\ndata = openbb.stocks.options.load_options_chains("^VIX", source = "YahooFinance")\n')),(0,r.kt)("p",null,"Loads XIU data from TMX and displays the 25 highest open interest options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from openbb_terminal.sdk  import openbb\ndata = openbb.stocks.options.load_options_chains("XIU", "TMX")\ndata.chains.sort_values("openInterest", ascending=False).head(25)\n')),(0,r.kt)("p",null,"Loads the EOD chains data for XIU.TO from March 15, 2020, sorted by number of transactions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from openbb_terminal.sdk  import openbb\ndata = openbb.stocks.options.load_options_chains("XIU.TO", "TMX", "2020-03-15")\ndata.chains.sort_values("transactions", ascending=False).head(25)\n')),(0,r.kt)("hr",null))}d.isMDXComponent=!0}}]);